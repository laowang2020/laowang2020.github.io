<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://laowang2020.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 28 Jun 2020 12:57:54 +0800</lastBuildDate>
    
	<atom:link href="https://laowang2020.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多线程基本原理</title>
      <link>https://laowang2020.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 28 Jun 2020 12:57:54 +0800</pubDate>
      
      <guid>https://laowang2020.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>多线程基本原理 为什么需要多线程  Java的执⾏模型是同步/阻塞(block)的 从本质上来说是为了占满CPU的使用率，以达到n*100%(n指CPU的核心数)；一般程序可以简单的分为CPU密集型和IO密集型；对于IO密集型应⽤极其有⽤，对于CPU密集型应⽤稍有折扣 ，  多线程带来了什么问题，如何避免？   方法栈是线程私有的
  静态变量/类变量是被所有线程共享的
  线程难的本质原因是你要看着同⼀份代码，想象不同的⼈在疯狂地以乱序执⾏它
  一般来说，问题多出现在需要共享变量的情况下，多个并行线程，需要操作同一个变量，如果对这个变量的操作不是原子性的（比如：i+=1），且由于多个线程的并行，是乱序的，存在会先取值，被截断，再被其他线程取值，计算，赋值，再回到本线程计算，赋值，导致计算结果的不可控制。
  如何避免？
 需要保证操作公共变量时，保证该操作是原子性的，不会被拆分为多个操作，且被乱序执行    线程的生命周期及基本状态  java的线程生命周期有6种状态  New（初始化状态） Runnable（就绪状态） Running（运行状态） Blocked（阻塞状态） Terminated(终止状态)      New(初始化状态)：当线程对象创建后，即进入了新建状态，如：Thread t = new Thread();
  Runnable(就绪状态): 当调用线程对象的start()方法，线程即进入就绪状态。处于就绪的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行,并不是说执行了start()此线程立即就会执行
  Running(运行状态): 当就绪状态中的线程获得了CPU执行资源,执行run()中的代码,这样的线程称为运行状态的线程.
  Blocked(阻塞状态): 处于运行状态中的线程由于某种原因,暂时放弃对CPU的使用权，停止执行,此时进入阻塞状态,直到其进入到就绪状态,才有机会再次被CPU调用以进入到运行状态.线程的阻塞状态分为两种: 第一种,Waiting(无时间限制的等待状态): 这个状态下是不能分配CPU执行的，有三种情况会使得Running状态到waiting状态
 调用无参的Object的wait方法.等到notifyAll() 或者 notify() 唤醒就会回到Runnable状态. 调用无参的Thread.join()方法.比如你在主线程里建立了一个线程A,调用A.join(),那么你的主线程是得等A执行完了才会继续执行,这时你的主线程就是等待状态 调用LockSupport.park()方法,LockSupport是Java6引入的一个工具类Java并发包中的锁都是基于它实现的,再调用LockSupport.unpark(Thread thread),就会回到Runnable状态 第二种，Timed_Waiting(有时间限制的等待状态)：  其实这个状态和Waiting就是有没有超时时间的差别，这个状态下也是不能分配CPU执行的。有五种情况会使得Runnable状态到waiting状态。</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>https://laowang2020.github.io/posts/collections/</link>
      <pubDate>Sat, 23 May 2020 16:28:09 +0800</pubDate>
      
      <guid>https://laowang2020.github.io/posts/collections/</guid>
      <description>Collection体系 数组与集合的区别 数组
 数组能存储基本数据类型和引用数据类型 数组的长度不可变  集合
 集合是存对象的容器 长度可变（扩容：创建一个更大的空间，然后把原有的所有元素拷贝过去） 只能存储对象，不可以存储引用数据类型  Collection的基本概念   Collection是整个collect体系的根接口，Collection表示一组对象，这些对象也称为collection的元素
  JDK不提供此接口的任何直接实现，它提供更具体的子接口实现，
  Collection体系的常用类  List(有序可重复) （存放对象的集合）  ArrayList (底层数据结构是数组，查找快，增删慢) LinkedList (底层数据结构是链表，查找慢，增删快)   Set(无序不可重复)  HashSet (用哈希算法，hashcode 和 equals),注意:HashSet插入数据顺序是随机的  LinkedHashSet (插入数据是有序的)   TreeSet (底层数据结构是红黑树，comparable或者comparetor) 判断重复的方法：equal()方法   Map (键值对key和value,键和值是映射关系) （键是唯一的，值可以重复，Map中的key返回的Set集合实质就是一个HashSet）  HashMap TreeMap   HashSet比ArrayList查找速度快的多  Collection 的常用方法 方法 作用 add(E e) 添加一个元素到此collection中 addAll 将指定collection中的所有元素都添加 clear() 移除此collection中的所有元素 contains(Object o) 如果此collection包含指定的元素，返回true containsAll(Collection c) 如果此collection包含指定collection的所有元素，返回true equals(Object o) 比较此collection与指定对象是否相等 hashcode() 返回此collection的哈希码值 isEmpty() 如果此collection不包含任何对象，则返回true iteraator() 返回在此collection的元素上进行迭代的迭代器 remove（Object o） 从此collection移除指定元素，如果存在的话 removeAll(Collection c) 移除此collection中包含指定collection中的所有元素、 retainAll(Collection c) 仅保留此collection中那些也在指定collection中存在的元素，而且还会修改原先的数据（可能会产生错误） size() 返回此collection的元素数 toArray() 返回包含此collection中所有的元素的数组  动态扩容的实现  为什么要指定初始容量？ list集合看上去可以无限添加元素，但最终收到某个容量的限制，这个容量就是初始容量（一个数组） 需要初始容量的原因就是避免某些情况无线扩容导致内存满负荷直到出现故障 如何实现动态扩容？ 旧容量不够时，会通过add（）方法创建一个更大的容量空间，然后把所有的元素拷贝进去，而之前的数字空间就会变成垃圾  java世界里第二重要的约定：hashcode 1.</description>
    </item>
    
    <item>
      <title>包管理与maven</title>
      <link>https://laowang2020.github.io/posts/%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</link>
      <pubDate>Mon, 18 May 2020 15:59:27 +0800</pubDate>
      
      <guid>https://laowang2020.github.io/posts/%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</guid>
      <description>java的包管理与maven初步 jvm的工作流程  执行一个类的字节码 执行过程中碰到新的类，加载它 接着执行  在哪里可以找到类&amp;mdash;&amp;ndash;类路径(Classpath) -classpath/-cp   类在加载过程中会去classpath中逐个寻找对应的类，碰到了jar包就会去解压，碰到文件夹就会进文件夹找，知道找不到为止就会报错
  类的全限定类名（目录层级）确定了唯一的类
  jar包就是把许多类放在一起打的压缩包
  传递性依赖
 你依赖的类还依赖了别的类 你要运行一个程序，不能只放一个jar包，需要把所有要用的类放到classpath    Classpath hell（依赖地狱）
 全限定类名是类的唯一标识 当多个同名类同时出现在Classpath中，就是噩梦的开始  要引用哪个类呢？&amp;mdash;-谁在前面就用谁   但是同名类里的代码不一样，可能会产生错误    包管理  你要使用一些第三方类，就要告诉jvm去哪里找 包管理的本质就是告诉jvm如何找到所需的第三方类库 解决其中的冲突问题  Maven&amp;mdash;划时代的包管理   约定优于配置
  Maven远远不止是包管理工具
  Maven的中央仓库
 按照一定的约定存储包    Maven 的本地仓库
 默认位于~~/.2 下载的第三方包在这里进行缓存    Maven的包</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://laowang2020.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 17 May 2020 12:39:06 +0800</pubDate>
      
      <guid>https://laowang2020.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>用 Hugo 搭建个人博客 在安装好HUgo的前提下
操作流程
 在D/Software中打开git bash,输入 &amp;ldquo;hugo new site 仓库名&amp;rdquo; 回车 输入“code 仓库名”,在vs code中打开当前目录，打开新终端，输入&amp;quot;git init&amp;rdquo;,初始化仓库,以下所有命令都在vs code中执行 添加主题，输入“git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke”，“echo &amp;lsquo;theme = &amp;ldquo;ananke&amp;rdquo;&amp;rsquo; &amp;raquo; config.toml” 添加文章 输入“hugo new posts/my-first-post.md” 运行 &amp;ldquo;hugo server -D&amp;rdquo; 进入 config.toml,把languageCode改成&amp;quot;zh-Hans&amp;rdquo; 运行 &amp;ldquo;hugo&amp;rdquo;,新建了一个public目录  将public目录提交到github
 新建一个.gitignore文件,将/public写进.gitignore,意思就是当前仓库不要储存public,public要自成一个仓库 &amp;ldquo;cd public&amp;quot;进入public目录，运行&amp;quot;git init&amp;rdquo; 运行&amp;quot;git add .&amp;quot;,&amp;ldquo;git commit -v&amp;rdquo; 在github新建一个仓库，仓库名为&amp;quot;用户名.github.io&amp;rdquo; 运行&amp;quot;git remote add origin git@github.com:laowang2020/laowang2020.github.io.git&amp;rdquo;,&amp;ldquo;git push -u origin master&amp;rdquo; 进入github仓库，在&amp;quot;用户名.github.io&amp;rdquo;,进入Settings查看  </description>
    </item>
    
  </channel>
</rss>